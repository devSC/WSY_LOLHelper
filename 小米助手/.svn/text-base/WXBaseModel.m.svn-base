//
//  WXBaseModel.m
//  MTWeibo
//
//  Created by wei.chen on 11-9-22.
//  Copyright 2011年 www.iphonetrain.com 无限互联ios开发培训中心 All rights reserved.
//

#import "WXBaseModel.h"

@implementation WXBaseModel

-(id)initWithDataDic:(NSDictionary*)data{
	if (self = [super init]) {
		[self setAttributes:data];
	}
	return self;
}

+ (NSArray *)hardpickDicArray{

    NSArray *pickDicArray = @[@{@"艾欧尼亚": @"电信一"}, @{@"祖安": @"电信二"},@{@"诺克萨斯": @"电信三"},@{@"班德尔城": @"电信四"},@{@"皮尔特沃夫": @"电信五"},@{@"战争学院": @"电信六"},@{@"巨神峰": @"电信七"},@{@"雷瑟守备": @"电信八"},@{@"裁决之地": @"电信九"},@{@"黑色玫瑰": @"电信十"},@{@"暗影岛": @"电信十一"},@{@"钢铁烈阳": @"电信十二"},@{@"均衡教派": @"电信十三"},@{@"水晶之痕": @"电信十四"},@{@"影流": @"电信十五"},@{@"守望之海": @"电信十六"},@{@"征服之海": @"电信十七"},@{@"卡拉曼达": @"电信十八"},@{@"皮城警备": @"电信十九"},@{@"比尔吉沃特": @"网通一"},@{@"德玛西亚": @"网通二"},@{@"弗雷尔卓德": @"网通三"},@{@"无畏先锋": @"网通四"},@{@"怒瑞玛": @"网通五"},@{@"扭曲丛林": @"网通六"},@{@"教育网专区": @"教育一"}];
    return [[pickDicArray retain] autorelease];
}
+ (NSArray *)hardpickArray{
    NSArray *pickerArray = @[@"艾欧尼亚", @"祖安", @"诺克萨斯", @"班德尔城", @"皮尔特沃夫", @"战争学院", @"巨神峰", @"雷瑟守备", @"裁决之地", @"黑色玫瑰", @"暗影岛", @"钢铁烈阳", @"均衡教派", @"水晶之痕", @"影流", @"守望之海", @"征服之海", @"卡拉曼达", @"皮城警备",  @"皮尔吉沃特", @"德玛西亚", @"费雷尔卓德", @"无畏先锋", @"怒瑞玛", @"扭曲丛林", @"教育网专区"];
    return [[pickerArray retain] autorelease];
}

//获取用户图标
+ (NSData *)getUserInfoImageWithIcon: (NSString *)Id
{
    NSString *urlString = [NSString stringWithFormat:@"http://img.lolbox.duowan.com/profileIcon/profileIcon%@.jpg", Id];
    NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:urlString]];
//    UIImage *image = [UIImage imageWithData:data];
    return data;
}

//获取用户等级Icon标
+ (NSDictionary *)getUserGlobleDataWithOriginalDic: (NSDictionary *)dic
{
    return [[[dic objectForKey:@"global"] retain] autorelease];
}

//获取用于经常使用英雄
+ (NSDictionary *)getUserMostUserHerosWithOriginalDic:(NSDictionary *)dic
{
    return [[[dic objectForKey:@"mostUserHeros"] retain] autorelease];

}
//获取用户匹配比赛记录
+ (NSDictionary *)getUserNormalWithOriginalDic:(NSDictionary *)dic
{
    return [[[dic objectForKey:@"normal"] retain] autorelease];
}
//获取用户rank值总分数
+ (NSDictionary *)getUserZdlWithOriginalDic:(NSDictionary *)dic
{
    return [[[dic objectForKey:@"zdl"] retain] autorelease];
}
//获取用户排位赛记录
+ (NSDictionary *)getUserRankedWithOriginalDic:(NSDictionary *)dic
{
    return [[[dic objectForKey:@"ranked"] retain] autorelease];
}
//获取用户战区
+ (NSDictionary *)getUserWarzoneWithOriginalDic:(NSDictionary *)dic
{
    return [[[dic objectForKey:@"warzone"] retain] autorelease];
}
//获取用户极地大乱斗
+ (NSDictionary *)getUserAramWithOriginalDic:(NSDictionary *)dic
{
    return [[[dic objectForKey:@"aram"] retain] autorelease];
}
//获取用户人机记录
+ (NSDictionary *)getUserBotWithOriginalDic:(NSDictionary *)dic
{
    return [[[dic objectForKey:@"bot"] retain] autorelease];
}

+ (NSString *)returnUserRankAndTierWithRank: (NSString *)rank
                                       tier: (NSString *)tier
                                      point: (NSString *)point
{
    NSDictionary *rankDic = @{@"0": @"Ⅰ", @"1": @"Ⅱ", @"2": @"Ⅲ", @"3": @"Ⅳ", @"4": @"Ⅴ"};
    NSDictionary *tierDic = @{@"0": @"黄铜", @"1": @"青铜", @"2": @"白银", @"3": @"黄金", @"4": @"白金", @"5": @"钻石", @"6": @"最强王者"};
    NSString *rankString = [rankDic objectForKey:[NSString stringWithFormat:@"%@", rank ]];
    NSString *tierString = [tierDic objectForKey:[NSString stringWithFormat:@"%@", tier ]];
    NSString *returnString = [NSString stringWithFormat:@"%@%@/%@", tierString, rankString, point];
    return [[returnString retain] autorelease];
}

+ (NSArray *)returnDataStationViewInfo
{
//NSDictionary *dic = []
    
    // 所有英雄   http://lol.data.shiwan.com/lolHeros/?filter=all&type=all  //带图片路径
    //    获取所有物品:http://lol.data.shiwan.com/lolItemFilter/lolvideo?index=99
    //    /召唤师技能: http://lol.data.shiwan.com/lolSpell
    //所有符文: http://lol.data.shiwan.com/lolRune/?tag=seal&tier=3
    NSString *allHerosUrl = @"http://lol.data.shiwan.com/lolHeros/?filter=all&type=all";
    NSString *allItemterUrl = @"http://lol.data.shiwan.com/lolItemFilter/lolvideo?index=99";
    NSString *lolSpellUrl = @"http://lol.data.shiwan.com/lolSpell";
    NSString *allRuneUrl = @"http://lol.data.shiwan.com/lolRune/?tag=seal&tier=3";
   
//    NSArray *array = [NSArray arrayWithObjects:@"全部英雄", @"物品", @"召唤师资料", @"符文", nil];
    NSArray *array = @[@{@"全部英雄": allHerosUrl}, @{@"所有物品": allItemterUrl}, @{@"召唤师技能": lolSpellUrl}, @{@"所有符文": allRuneUrl}];
return [[array retain] autorelease];

}
+ (NSArray *)returnAllGoodsViewInfo
{
    
    return nil;
}




- (NSDictionary*)attributeMapDictionary{
	return nil;
}

- (SEL)getSetterSelWithAttibuteName:(NSString*)attributeName{
	NSString *capital = [[attributeName substringToIndex:1] uppercaseString];
	NSString *setterSelStr = [NSString stringWithFormat:@"set%@%@:",capital,[attributeName substringFromIndex:1]];
	return NSSelectorFromString(setterSelStr);
}
- (NSString *)customDescription{
	return nil;
}

- (NSString *)description{
	NSMutableString *attrsDesc = [NSMutableString stringWithCapacity:100];
	NSDictionary *attrMapDic = [self attributeMapDictionary];
	NSEnumerator *keyEnum = [attrMapDic keyEnumerator];
	id attributeName;
	
	while ((attributeName = [keyEnum nextObject])) {
		SEL getSel = NSSelectorFromString(attributeName);   
		if ([self respondsToSelector:getSel]) {
			NSMethodSignature *signature = nil;
			signature = [self methodSignatureForSelector:getSel];
			NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];
			[invocation setTarget:self];
			[invocation setSelector:getSel];
			NSObject *valueObj = nil;
			[invocation invoke];
			[invocation getReturnValue:&valueObj];
//            ITTDINFO(@"attributeName %@ value %@", attributeName, valueObj);
			if (valueObj) {
				[attrsDesc appendFormat:@" [%@=%@] ",attributeName, valueObj];		
				//[valueObj release];			
			}else {
				[attrsDesc appendFormat:@" [%@=nil] ",attributeName];		
			}
			
		}
	}
	
	NSString *customDesc = [self customDescription];
	NSString *desc;
	
	if (customDesc && [customDesc length] > 0 ) {
		desc = [NSString stringWithFormat:@"%@:{%@,%@}",[self class],attrsDesc,customDesc];
	}else {		
		desc = [NSString stringWithFormat:@"%@:{%@}",[self class],attrsDesc];
	}
    
	return desc;
}
-(void)setAttributes:(NSDictionary*)dataDic{
	NSDictionary *attrMapDic = [self attributeMapDictionary];
	if (attrMapDic == nil) {
        NSMutableDictionary *dic = [NSMutableDictionary dictionaryWithCapacity:[dataDic count]];
        for (NSString *key in dataDic) {
            [dic setValue:key forKey:key];
            attrMapDic = dic;
        }
	}
	NSEnumerator *keyEnum = [attrMapDic keyEnumerator];
	id attributeName;
	while ((attributeName = [keyEnum nextObject])) {
		SEL sel = [self getSetterSelWithAttibuteName:attributeName];
		if ([self respondsToSelector:sel]) {
			NSString *dataDicKey = [attrMapDic objectForKey:attributeName];
            id attributeValue = [dataDic objectForKey:dataDicKey];
			[self performSelectorOnMainThread:sel 
                                   withObject:attributeValue 
                                waitUntilDone:[NSThread isMainThread]];		
		}
	}
}

- (id)initWithCoder:(NSCoder *)decoder{
	if( self = [super init] ){
		NSDictionary *attrMapDic = [self attributeMapDictionary];
		if (attrMapDic == nil) {
			return self;
		}
		NSEnumerator *keyEnum = [attrMapDic keyEnumerator];
		id attributeName;
		while ((attributeName = [keyEnum nextObject])) {
			SEL sel = [self getSetterSelWithAttibuteName:attributeName];
			if ([self respondsToSelector:sel]) {
				id obj = [decoder decodeObjectForKey:attributeName];
				[self performSelectorOnMainThread:sel 
                                       withObject:obj
                                    waitUntilDone:[NSThread isMainThread]];
			}
		}
	}
	return self;
}
- (void)encodeWithCoder:(NSCoder *)encoder{
	NSDictionary *attrMapDic = [self attributeMapDictionary];
	if (attrMapDic == nil) {
		return;
	}
	NSEnumerator *keyEnum = [attrMapDic keyEnumerator];
	id attributeName;
	while ((attributeName = [keyEnum nextObject])) {
		SEL getSel = NSSelectorFromString(attributeName);
		if ([self respondsToSelector:getSel]) {
			NSMethodSignature *signature = nil;
			signature = [self methodSignatureForSelector:getSel];
			NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];
			[invocation setTarget:self];
			[invocation setSelector:getSel];
			NSObject *valueObj = nil;
			[invocation invoke];
			[invocation getReturnValue:&valueObj];
			
			if (valueObj) {
				[encoder encodeObject:valueObj forKey:attributeName];	
			}
		}
	}
}
- (NSData*)getArchivedData{
	return [NSKeyedArchiver archivedDataWithRootObject:self];
}

- (NSString *)cleanString:(NSString *)str {
    if (str == nil) {
        return @"";
    }
    NSMutableString *cleanString = [NSMutableString stringWithString:str];
    [cleanString replaceOccurrencesOfString:@"\n" withString:@"" 
                                    options:NSCaseInsensitiveSearch 
                                      range:NSMakeRange(0, [cleanString length])];
    [cleanString replaceOccurrencesOfString:@"\r" withString:@"" 
                                    options:NSCaseInsensitiveSearch 
                                      range:NSMakeRange(0, [cleanString length])];    
    return cleanString;
}

#ifdef _FOR_DEBUG_  
-(BOOL) respondsToSelector:(SEL)aSelector {  
//    printf("SELECTOR: %s\n", [NSStringFromSelector(aSelector) UTF8String]);  
    return [super respondsToSelector:aSelector];  
}  
#endif

@end
